name: MCP 監控系統 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-psutil
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        # 測試 FastAPI 應用程式
        python -c "from app.main import app; print('✅ FastAPI 應用程式可以正常導入')"
        python -c "from app.core.scheduler import scheduler; print('✅ Discord 排程器可以正常導入')"
        python -c "from app.core.monitors.discord import DiscordMonitor; print('✅ Discord 監控模組可以正常導入')"
        python -c "from app.api.models.schedule import ScheduleConfig; print('✅ 排程模型可以正常導入')"
        
        # 測試 Discord 集成模組
        python -c "from discord_integration.mcp_discord_system_monitor import MCPDiscordMonitor; print('✅ Discord 系統監控可以正常導入')"
        
        # 運行測試套件
        if [ -d "tests" ] && [ -n "$(find tests -name '*.py' -not -name '__init__.py' -print -quit)" ]; then
          pytest tests/ -v
        else
          echo "✅ 測試目錄為空或無測試檔案，跳過測試"
        fi
    
    - name: Check code quality
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks
      run: |
        bandit -r . -f json -o bandit-report.json --exclude "**/tests/**,**/venv/**,**/env/**" || true
        safety check --ignore 70612 || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI application
      run: |
        python -c "from app.main import app; print('✅ FastAPI 應用程式可以正常啟動')"
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 1 &
        sleep 5
        curl -f http://localhost:8000/health || exit 1
        kill %1
    
    - name: Check environment variables
      run: |
        echo "DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN:+已設定}"
        echo "DISCORD_CHANNEL_ID: ${DISCORD_CHANNEL_ID:+已設定}"
      env:
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
